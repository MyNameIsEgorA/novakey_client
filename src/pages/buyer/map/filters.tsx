import type { ObjectFullData } from "@/entities/buy/objectFullData.ts";
import type { Dispatch, FC, SetStateAction } from "react";
import { cn } from "@/lib/utils.ts";
import { BaseFilters, type Filters } from "@/shared/type/filters.ts";

interface MapFiltersProps {
  allEntities: ObjectFullData[];
  entitiesToShow: ObjectFullData[];
  setEntitiesToShow: Dispatch<SetStateAction<ObjectFullData[]>>;
  className: string;
  filters: Filters;
  setFilters: Dispatch<SetStateAction<Filters>>;
}

const availableAmenities = [
  "–ü–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞",
  "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä",
  "–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞",
  "–ö–æ–Ω—Å—å–µ—Ä–∂",
  // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —É–¥–æ–±—Å—Ç–≤ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑ ObjectFullData.amenities
];
const availableDistricts = [
  "any",
  "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π",
  "–°–µ–≤–µ—Ä–Ω—ã–π",
  "–Æ–∂–Ω—ã–π",
  "–í–æ—Å—Ç–æ—á–Ω—ã–π",
];
const availableDevelopers = [
  "any",
  '–û–û–û "–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç"',
  "–ù–æ–≤–æ—Å—Ç—Ä–æ–π",
  "–ü—Ä–µ–º–∏—É–º –°—Ç—Ä–æ–π",
  "–≠–∫–æ–°—Ç—Ä–æ–π",
  "–≠–ª–∏—Ç –î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç",
  "–ú–∞—Å—Å–∏–≤ –°—Ç—Ä–æ–π",
];
const availableConstructionStatuses = [
  "any",
  "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
  "–ì–æ—Ç–æ–≤ –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é",
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–û–±–ª–∏—Ü–æ–≤–∫–∞"
];

export const MapFilters: FC<MapFiltersProps> = ({
  allEntities,
  entitiesToShow,
  className,
  filters,
  setFilters,
}) => {
  return (
    <div
      className={cn("p-3 bg-white rounded-l w-1/4 overflow-auto", className)}
    >
      <div>
        <div className="flex justify-between items-center">
          <h2 className="text-xl text-black">–§–∏–ª—å—Ç—Ä—ã</h2>
          {JSON.stringify(filters) !== JSON.stringify(BaseFilters) && (
            <div
              className={"text-[12px] text-blue-600 cursor-pointer"}
              onClick={() => {
                setFilters(BaseFilters);
              }}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </div>
          )}
        </div>
        <p className="text-sm text-gray-500">
          {entitiesToShow.length} –∏–∑ {allEntities.length} –Ω–∞–π–¥–µ–Ω–æ
        </p>
      </div>
      <div className={"mt-4"}>
        <h3 className="text-black mb-4">–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</h3>
        <div className="space-y-3">
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              checked={filters.nearTransport}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  nearTransport: e.target.checked,
                }))
              }
              className="mr-3 rounded accent-blue-600"
            />
            <span className="text-gray-700">üöá –†—è–¥–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</span>
          </label>
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              checked={filters.nearSchool}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  nearSchool: e.target.checked,
                }))
              }
              className="mr-3 rounded accent-blue-600"
            />
            <span className="text-gray-700">üè´ –†—è–¥–æ–º —à–∫–æ–ª–∞</span>
          </label>
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              checked={filters.nearShops}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  nearShops: e.target.checked,
                }))
              }
              className="mr-3 rounded accent-blue-600"
            />
            <span className="text-gray-700">üõí –†—è–¥–æ–º –º–∞–≥–∞–∑–∏–Ω—ã</span>
          </label>
        </div>
      </div>

      <div className={"mt-5"}>
        <label className="text-black mb-3 block">–¶–µ–Ω–∞, –º–ª–Ω ‚ÇΩ</label>
        <div className="space-y-3">
          <input
            type="range"
            min="0"
            max="20000000"
            step="500000"
            value={filters.priceRange[1]}
            onChange={(e) =>
              setFilters((prev) => ({
                ...prev,
                priceRange: [0, parseFloat(e.target.value)],
              }))
            }
            className="w-full accent-blue-600"
          />
          <div className="flex justify-between text-sm text-gray-500">
            <span>0 –º–ª–Ω</span>
            <span className="text-blue-600">
              –¥–æ {filters.priceRange[1] > 0 ? filters.priceRange[1] : "0"} –†
            </span>
            <span>20 –º–ª–Ω</span>
          </div>
        </div>
      </div>

      <div>
        <label className="text-black mb-3 block mt-5">–ü–ª–æ—â–∞–¥—å, –º¬≤</label>
        <div className="space-y-3">
          <div className="space-y-2">
            <input
              type="range"
              min="20"
              max="150"
              value={filters.areaRange[0]}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  areaRange: [parseInt(e.target.value), prev.areaRange[1]],
                }))
              }
              className="w-full accent-blue-600"
            />
            <input
              type="range"
              min="20"
              max="150"
              value={filters.areaRange[1]}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  areaRange: [prev.areaRange[0], parseInt(e.target.value)],
                }))
              }
              className="w-full accent-blue-600"
            />
          </div>
          <div className="flex justify-between text-sm text-gray-500">
            <span>{filters.areaRange[0]} –º¬≤</span>
            <span className="text-blue-600">
              {filters.areaRange[0]} - {filters.areaRange[1]} –º¬≤
            </span>
            <span>{filters.areaRange[1]} –º¬≤</span>
          </div>
        </div>
      </div>

      {/* Floor Range - New UI for floor filtering */}
      <div>
        <label className="text-black mb-3 block mt-5">–≠—Ç–∞–∂</label>
        <div className="space-y-3">
          <div className="space-y-2">
            <input
              type="range"
              min="1"
              max="30"
              value={filters.floorRange[0]}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  floorRange: [parseInt(e.target.value), prev.floorRange[1]],
                }))
              }
              className="w-full accent-blue-600"
            />
            <input
              type="range"
              min="1"
              max="30"
              value={filters.floorRange[1]}
              onChange={(e) =>
                setFilters((prev) => ({
                  ...prev,
                  floorRange: [prev.floorRange[0], parseInt(e.target.value)],
                }))
              }
              className="w-full accent-blue-600"
            />
          </div>
          <div className="flex justify-between text-sm text-gray-500">
            <span>{filters.floorRange[0]} —ç—Ç–∞–∂</span>
            <span className="text-blue-600">
              {filters.floorRange[0]} - {filters.floorRange[1]} —ç—Ç–∞–∂
            </span>
            <span>{filters.floorRange[1]} —ç—Ç–∞–∂</span>
          </div>
        </div>
      </div>

      <div className="space-y-4 mt-6">
        <div>
          <label className="text-black mb-2 block">–ö–æ–º–Ω–∞—Ç—ã</label>
          <select
            value={filters.rooms}
            onChange={(e) =>
              setFilters((prev) => ({ ...prev, rooms: e.target.value }))
            }
            className="w-full bg-gray-100 rounded-lg px-4 py-3 border-0 outline-none focus:bg-white focus:ring-2 focus:ring-blue-500"
          >
            <option value="any">–õ—é–±–∞—è</option>
            <option value="–°—Ç—É–¥–∏—è">–°—Ç—É–¥–∏—è</option>
            <option value="1">1-–∫–æ–º–Ω.</option>
            <option value="2">2-–∫–æ–º–Ω.</option>
            <option value="3">3-–∫–æ–º–Ω.</option>
            <option value="4">4+ –∫–æ–º–Ω.</option>
          </select>
        </div>

        <div>
          <label className="text-black mb-2 block">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</label>
          <select
            value={filters.status}
            onChange={(e) =>
              setFilters((prev) => ({ ...prev, status: e.target.value }))
            }
            className="w-full bg-gray-100 rounded-lg px-4 py-3 border-0 outline-none focus:bg-white focus:ring-2 focus:ring-blue-500"
          >
            {availableConstructionStatuses.map((status) => (
              <option key={status} value={status}>
                {status === "any" ? "–õ—é–±–æ–π" : status}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="text-black mb-2 block">–†–∞–π–æ–Ω</label>
          <select
            value={filters.district}
            onChange={(e) =>
              setFilters((prev) => ({ ...prev, district: e.target.value }))
            }
            className="w-full bg-gray-100 rounded-lg px-4 py-3 border-0 outline-none focus:bg-white focus:ring-2 focus:ring-blue-500"
          >
            {availableDistricts.map((district) => (
              <option key={district} value={district}>
                {district === "any" ? "–õ—é–±–æ–π" : district}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="text-black mb-2 block">–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫</label>
          <select
            value={filters.developer}
            onChange={(e) =>
              setFilters((prev) => ({ ...prev, developer: e.target.value }))
            }
            className="w-full bg-gray-100 rounded-lg px-4 py-3 border-0 outline-none focus:bg-white focus:ring-2 focus:ring-blue-500"
          >
            {availableDevelopers.map((dev) => (
              <option key={dev} value={dev}>
                {dev === "any" ? "–õ—é–±–æ–π" : dev}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className={"mt-5"}>
        <label className="text-sm text-gray-600 mb-3 block">–£–¥–æ–±—Å—Ç–≤–∞</label>
        <div className="flex flex-wrap gap-2">
          {availableAmenities.map((amenity) => (
            <button
              key={amenity}
              onClick={() => {
                setFilters((prev) => ({
                  ...prev,
                  amenities: prev.amenities.includes(amenity)
                    ? prev.amenities.filter((a) => a !== amenity)
                    : [...prev.amenities, amenity],
                }));
              }}
              className={`px-3 py-1.5 rounded-full text-sm border transition-colors ${
                filters.amenities.includes(amenity)
                  ? "bg-blue-100 text-blue-700 border-blue-200"
                  : "bg-gray-100 text-gray-700 border-gray-200"
              }`}
            >
              {amenity}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};
